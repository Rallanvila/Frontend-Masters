# Javascript: The Hard Parts, v2

## Javascript Principles

### Definitions Learned

**Execution context** - created to run the code of a function - has two parts (we've already seen them!)

- thread of execution
- memory

**Call Stack**- the process on how JS runs code

- Javascript keeps track of what function is currently running (where's the thread of execution)
- Run a fn - add to call stack
- Finish running hte function - JS removes it from call stack
- Whatever is top of the call stack -that's the fn we're currently running

**Higher Order Fns** - the outer fn that takes in a fn in our higher order fn
**Callback Fn** - the function we insert is our callback function.

## Functions and Callbacks

- Fn help with keeping your code dry (don't repeat yourself)

```javascript
function tonSquared() {
  return 10 * 10;
}

function nineSquared() {
  return 9 * 9;
}
```

the above is a bad practice as it's not dry, you can accomplish the same with the below and it'll be reusable and stored in the memory one time.

```javascript
function squareNum(number) {
  return num * num;
}
```

### Closure

- Closure is the most esoteric of Javascript concepts
- Enables powerful pro-level functions like 'once' and 'memoize'
- Many JS design patters including the module pattern use closure
- build iterators, handle partial application and maintain state in an asynchronous wold.

#### Functions with memories

- when our functions get called, we create a live store of data (local memory/variable environment/state) for that function's execution context
- when the function finishes executing, it's local memory is deleted (except the returned value)
- This owuld let our function definitions have an associated cache/persistant memory
- But it all starts with us **returning a function from another function**

```javascript 
function createFunction() {
  function multiplyBy2(num) {
    return num * 2;
  }
  return multiplyBy2;
}

const generatedFunc = createFunction();
const result = generatedFun(3);
```

What's happening above:

1. `createFunction` is being declared and being stored in the global memory and is returning the `fn` `multiplyBy2`
2. `generateFunction` is being declared and since `createFunction()` is returning `multiplyBy2`, that is what `generateFunction` is. **it becomes the function it is returning and that is all. There is no corelation to the name declared whatsoever because it has left the execution context**
3. `result` is executing `generateFunction` with 3, in essence doing `multiplyBy2(3)`. This starts a new execution context.

#### Backpack - (Persistent Lexical Static Scope Linked Data):
Below in the backpack concept, `outer()` is returning the function `incrementCounter()`. `myNewFunciton` has  now become `incrementCounter`, 

Now this is the cool part, what's being illustrated in the drawing is where it's looking for the `counter` variable in order to increment it. When it's stored inside a function like this, it has a `backpack` that carries it's individual scope, to keep everything separate. 

![image](./images/backpack-concept.png)

#### What can we call this 'backpack'?
* Closed over 'Variable Environment' (C.O.V.E)
* Persistent Lexical Scope Referenced Data (P.L.S.R.D)
* 'Backpack'
* 'Closure'

The 'backpack' (or 'closure') of live data is attached `incrementCounter` (then to `MyNewFunction`) though a hidden party known as [(scope)] which persists when the inner function is returned out.

*Below illustrates how the above can create powerful spots in memory that have it's own localized memory. I believe this is how frameworks like React are built upon. Essentially, each component is able to exist with it's own state, due to closure*

![image](./images/backpack2.png)

#### Individual backpacks

If we run 'outer' again and store the returned `incrementCounter` function definition in `anotherFunction`, this new `incrementCounter` function was created in a new execution context and therefore has a brand new independent backpack.

#### Closure gives our functions persistent memories and entirely new toolkit for writing professional code

**Helper functions:** Everyday professional helper functions like ‘once’ and ‘memoize’
* 

**Iterators and generators:** Which use lexical scoping and closure to achieve the most contemporary patterns for handling data in JavaScript

**Module pattern:** Preserve state for the life of an application without polluting the global namespace

**Asynchronous JavaScript:** Callbacks and Promises rely on closure to persist state in an asynchronous environment

## Promises, Async & the Event Loop

- **Promises** - the most significant ES6 feature
- **Asynchronicity** - the feature that makes dynamic web applications possible
- **The event loop** - JavaScript’s triage
- **Microtask queue, Callback queue and Web Browser features (APIs)**o

### Asynchronicity is the backbone of modern web development in JavaScript yet...

JavaScript is:
- Single threaded (one command runs at a time)
- Synchronously executed (each line is run in order the code appears)

So what if we have a task:
- Accessing Twitter’s server to get new tweets that takes a long time
- Code we want to run using those tweets

**Challenge**: We want to wait for the tweets to be stored in tweets so that they’re there to run displayTweets on - but no code can run in the meantime

### JavaScript is not enough - We need new pieces (some of which aren’t JavaScript at all)

Our core JavaScript engine has 3 main parts:
- Thread of execution
- Memory/variable environment
- Call stack

We need to add some new components:
- Web Browser APIs/Node background APIs
- Promises
- Event loop, Callback/Task queue and micro task queue


**The crazy thing is, most of the things, (console, sockets, network request, document, setTimeout) aren't features of javascript, but features of the browser**

#### Below it shows the relationship with Javascript and the web browser utilizing the `setTimeout()` function: 
![image](./images/async1.png)

#### We have rules for the execution of our asynchronously delayed code

- Hold promise-deferred functions in a microtask queue and callback function in a task queue (Callback queue) when the Web Browser Feature (API) finishes

- Add the function to the Call stack (i.e. run the function) when:
  - Call stack is empty & all global code run (Have the Event Loop check this condition)

- Prioritize functions in the microtask queue over the Callback queue

#### Promises, Web APIs, the Callback & Microtask Queues and Event loop enable:

- **Non-blocking applications:** This means we don’t have to wait in the single thread and don’t block further code from running.

- **However long it takes:** We cannot predict when our Browser feature’s work will finish so we let JS handle automatically running the function on its completion.

- **Web applications:** Asynchronous JavaScript is the backbone of the modern web – letting us build fast ‘non-blocking’ applications.

## Classes and Prototypes
### Classes, Prototypes - Object Oriented JavaScript

- An enormously popular paradigm for structuring our complex code.
- Prototype chain - the feature behind-the-scenes that enables emulation of OOP but is a compelling tool in itself.
- Understanding the difference between `__proto__` and prototype.
- The `new` and `class` keywords as tools to automate our object & method creation.

### Core of development (and running code)

1. Save data (e.g. in a quiz game the scores of user1 and user2)
2. Run code (functions) using that data (e.g. increase user 2’s score)

Easy! So why is development hard?

In a quiz game I need to save lots of users, but also admins, quiz questions, quiz outcomes, league tables - all have data and associated functionality.

In 100,000 lines of code:
- Where is the functionality when I need it?
- How do I make sure the functionality is only used on the right data?
​⬤

### That is, I want my code to be:

1. Easy to reason about

But also

2. Easy to add features to (new functionality)
3. Nevertheless efficient and performant

The Object-oriented paradigm aims to let us achieve these three goals.

### So if I'm storing each user in my app with their respective data (let’s simplify)

**user1:**
- name: ‘Tim’
- score: 3

**user2:**
- name: ‘Stephanie’
- score: 5

And the functionality I need to have for each user (again simplifying!):
- increment functionality (there’d be a ton of functions in practice)

How could I store my data and functionality together in one place?
### Objects - store functions with their associated data!

This is the principle of encapsulation - and it’s going to transform how we can ‘reason about’ our code.

```javascript
const user1 = {
  name: "Will",
  score: 3,
  increment: function() { user1.score++; }
};

user1.increment(); // user1.score -> 4
```
### Creating user2 using dot notation

Declare an empty object and add properties with dot notation.

```javascript
const user2 = {}; // create an empty object

// assign properties to that object
user2.name = "Tim";
user2.score = 6;
user2.increment = function() {
  user2.score++;
};
```

### Creating user3 using `Object.create`

`Object.create` is going to give us fine-grained control over our object later on.

```javascript
const user3 = Object.create(null);

user3.name = "Eva";
user3.score = 9;
user3.increment = function() {
  user3.score++;
};
```
### Solution 1. Generate objects using a function

```javascript
function userCreator(name, score) {
  const newUser = {};
  newUser.name = name;
  newUser.score = score;
  newUser.increment = function() {
    newUser.score++;
  };
  return newUser;
}

const user1 = userCreator("Will", 3);
const user2 = userCreator("Tim", 5);
user1.increment();
```
### Solution 1. Generate objects using a function

**Problems:** Each time we create a new user we make space in our computer's memory for all our data and functions. But our functions are just copies.

Is there a better way?


**Benefits:** It's simple and easy to reason about!

### Solution 2: Using the prototype chain

Store the increment function in just one object and have the interpreter, if it doesn't find the function on user1, look up to that object to check if it's there.

Link user1 and functionStore so the interpreter, on not finding .increment, makes sure to check up in functionStore where it would find it.

Make the link with `Object.create()` technique.
### Solution 2: Using the prototype chain

```javascript
function userCreator(name, score) {
  const newUser = Object.create(userFunctionStore);
  newUser.name = name;
  newUser.score = score;
  return newUser;
};

const userFunctionStore = {
  increment: function() { this.score++; },
  login: function() { console.log("Logged in"); }
};

const user1 = userCreator("Will", 3);
const user2 = userCreator("Tim", 5);
user1.increment();
```
### What if we want to confirm our user1 has the property score

We can use the hasOwnProperty method - but where is it? Is it on user1? 🤔

All objects have a `__proto__` property by default which defaults to linking to a big object - `Object.prototype` full of (somewhat) useful functions.

We get access to it via userFunctionStore’s `__proto__` property - the chain.

**Arrow functions are lexically scoped** 

### Solution 3 - Introducing the keyword that automates the hard work: `new`

When we call the function that returns an object with `new` in front we automate 2 things:

1. Create a new user object
2. Return the new user object

But now we need to adjust how we write the body of userCreator - how can we:
- Refer to the auto-created object?
- Know where to put our single copies of functions?

```javascript
const user1 = new userCreator("Eva", 9);
const user2 = new userCreator("Tim", 5);
```
### The new keyword automates a lot of our manual work

```javascript
function userCreator(name, score) {
  // const newUser = Object.create(functionStore);
  this.name = name;
  this.score = score;
  // return newUser;
}

userCreator.prototype.increment = function() {
  this.score++;
};

const user1 = new userCreator("Will", 3);
```
### The new keyword automates a lot of our manual work

```javascript
function userCreator(name, score) {
  this.name = name;
  this.score = score;
}

userCreator.prototype.increment = function() {
  this.score++;
};

userCreator.prototype.login = function() {
  console.log("login");
};

const user1 = new userCreator("Eva", 9);

user1.increment();
```
### Solution 4: The class syntactic sugar

We’re writing our shared methods separately from our object ‘constructor’ itself (off in the `userCreator.prototype` object).

Other languages let us do this all in one place. ES2015 lets us do so too.

![image](./images/class-example.png)

### Solution 4: The class ‘syntactic sugar’

**Benefits:**
- Emerging as a new standard
- Feels more like the style of other languages (e.g. Python)

**Problems:**
- 99% of developers have no idea how it works and therefore fail interviews

But you will not be one of them!
